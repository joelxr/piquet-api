type Result {
  resultId: Int!
  raceId: Int!
  race(filter: FilterRaceInput): Race
  driverId: Int!
  driver(filter: FilterDriverInput): Driver
  constructorId: Int!
  constructor(filter: FilterConstructorInput): Constructor
  number: Int
  grid: Int!
  position: Int
  positionText: String!
  positionOrder: Int!
  points: Float!
  laps: Int!
  time: String
  milliseconds: Int
  fastestLap: Int
  rank: Int
  fastestLapTime: String
  fastestLapSpeed: Float
  statusId: Int!
}

input NewResultInput {
  resultId: Int!
  raceId: Int!
  driverId: Int!
  constructorId: Int!
  number: Int
  grid: Int!
  position: Int
  positionText: String!
  positionOrder: Int!
  points: Float!
  laps: Int!
  time: String
  milliseconds: Int
  fastestLap: Int
  rank: Int
  fastestLapTime: String
  fastestLapSpeed: Float
  statusId: Int!
}

input UpdateResultInput {
  raceId: Int
  driverId: Int
  constructorId: Int
  number: Int
  grid: Int
  position: Int
  positionText: String
  positionOrder: Int
  points: Float
  laps: Int
  time: String
  milliseconds: Int
  fastestLap: Int
  rank: Int
  fastestLapTime: String
  fastestLapSpeed: Float
  statusId: Int
}

input FilterResultInput {
  resultId: Int
  raceId: Int
  driverId: Int
  constructorId: Int
  number: Int
  grid: Int
  position: Int
  positionText: String
  positionOrder: Int
  points: Float
  laps: Int
  time: String
  milliseconds: Int
  fastestLap: Int
  rank: Int
  fastestLapTime: String
  fastestLapSpeed: Float
  statusId: Int
}

extend type Query {
  results(skip: Int, limit: Int, filter: FilterResultInput): [Result]!
  result(filter: FilterResultInput!): Result!
}

extend type Mutation {
  newResult(input: NewResultInput!): Result!
  updateResult(resultId: Int!, input: UpdateResultInput!): Result!
  removeResult(resultId: Int!): Result!
}

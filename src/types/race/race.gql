type Race {
  raceId: Int!
  year: Int!
  round: Int!
  circuitId: Int!
  circuit(filter: FilterCircuitInput): Circuit
  name: String!
  date: Date!
  time: String
  url: String
  constructorStandings(
    skip: Int
    limit: Int
    filter: FilterConstructorStandingInput
  ): [ConstructorStanding]
  driverStandings(
    skip: Int
    limit: Int
    filter: FilterDriverStandingInput
  ): [DriverStanding]
  qualifyings(
    skip: Int
    limit: Int
    filter: FilterQualifyingInput
  ): [Qualifying]
  pitStops(skip: Int, limit: Int, filter: FilterPitStopInput): [PitStop]
  lapTimes(skip: Int, limit: Int, filter: FilterLapTimeInput): [LapTime]
  results(skip: Int, limit: Int, filter: FilterResultInput): [Result]
}

input NewRaceInput {
  raceId: Int!
  year: Int!
  round: Int!
  circuitId: Int!
  name: String!
  date: Date!
  time: String
  url: String
}

input UpdateRaceInput {
  year: Int
  round: Int
  circuitId: Int
  name: String
  date: Date
  time: String
  url: String
}

input FilterRaceInput {
  raceId: Int
  year: Int
  round: Int
  circuitId: Int
  name: String
  date: Date
  time: String
  url: String
}

extend type Query {
  races(skip: Int, limit: Int, filter: FilterRaceInput): [Race]!
  race(filter: FilterRaceInput!): Race!
}

extend type Mutation {
  newRace(input: NewRaceInput!): Race!
  updateRace(raceId: ID!, input: UpdateRaceInput!): Race!
  removeRace(raceId: Int!): Race!
}

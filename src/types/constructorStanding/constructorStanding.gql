type ConstructorStanding {
  constructorStandingsId: Int!
  race: Race!
  constructor: Constructor!
  points: Float!
  position: Int
  positionText: String
  wins: Int!
}

input NewConstructorStandingInput {
  constructorStandingsId: Int!
  raceId: Int!
  constructorId: Int!
  points: Float!
  position: Int
  positionText: String
  wins: Int!
}

input UpdateConstructorStandingInput {
  raceId: Int
  constructorId: Int
  points: Float
  position: Int
  positionText: String
  wins: Int
}

input FilterConstructorStandingInput {
  constructorStandingsId: Int
  raceId: Int
  constructorId: Int
  points: Float
  position: Int
  positionText: String
  wins: Int
}

extend type Query {
  constructorStandings(
    skip: Int
    limit: Int
    filter: FilterConstructorStandingInput
  ): [ConstructorStanding]!
  constructorStanding(constructorStandingsId: Int!): ConstructorStanding!
}

extend type Mutation {
  newConstructorStanding(
    input: NewConstructorStandingInput!
  ): ConstructorStanding!
  updateConstructorStanding(
    constructorStandingsId: Int!
    input: UpdateConstructorStandingInput!
  ): ConstructorStanding!
  removeConstructorStanding(constructorStandingsId: Int!): ConstructorStanding!
}

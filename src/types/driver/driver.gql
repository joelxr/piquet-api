type Driver {
  driverId: Int!
  driverRef: String!
  number: Int
  code: String
  forename: String
  surname: String
  dob: Date
  nationality: String
  url: String
}

input NewDriverInput {
  driverId: Int!
  driverRef: String!
  number: Int
  code: String
  forename: String
  surname: String
  dob: Date
  nationality: String
  url: String
}

input UpdateDriverInput {
  driverRef: String
  number: Int
  code: String
  forename: String
  surname: String
  dob: Date
  nationality: String
  url: String
}

input FilterDriverInput {
  driverId: Int
  driverRef: String
  number: Int
  code: String
  forename: String
  surname: String
  dob: Date
  nationality: String
  url: String
}

extend type Query {
  drivers(skip: Int, limit: Int, filter: FilterDriverInput): [Driver]
  driver(driverId: ID!): Driver!
}

extend type Mutation {
  newDriver(input: NewDriverInput!): Driver!
  updateDriver(driverId: ID!, input: UpdateDriverInput!): Driver!
  removeDriver(driverId: ID!): Driver!
}

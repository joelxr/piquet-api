type PitStop {
  raceId: Int!
  race(filter: FilterRaceInput): Race
  driverId: Int!
  driver(filter: FilterDriverInput): Driver
  stop: Int!
  lap: Int!
  time: String!
  duration: Float
  milliseconds: Int
}

input NewPitStopInput {
  raceId: Int!
  driverId: Int!
  stop: Int!
  lap: Int!
  time: String!
  duration: Float
  milliseconds: Int
}

input UpdatePitStopInput {
  stop: Int
  lap: Int
  time: String
  duration: Float
  milliseconds: Int
}

input FilterPitStopInput {
  raceId: Int
  driverId: Int
  stop: Int
  lap: Int
  time: String
  duration: Float
  milliseconds: Int
}

extend type Query {
  pitStops(skip: Int, limit: Int, filter: FilterPitStopInput): [PitStop]!
  pitStop(filter: FilterPitStopInput!): PitStop!
}

extend type Mutation {
  newPitStop(input: NewPitStopInput!): PitStop!
  updatePitStop(
    raceId: Int!
    driverId: Int!
    stop: Int!
    input: UpdatePitStopInput!
  ): PitStop!
  removePitStop(raceId: Int!, driverId: Int!, stop: Int!): PitStop!
}

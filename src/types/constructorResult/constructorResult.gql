type ConstructorResult {
  constructorResultsId: Int!
  raceId: Int!
  race: Race!
  constructor: Constructor!
  points: Float
  status: String
}

input NewConstructorResultInput {
  constructorResultsId: Int!
  raceId: Int!
  constructorId: Int!
  points: Float
  status: String
}

input UpdateConstructorResultInput {
  raceId: Int
  constructorId: Int
  points: Float
  status: String
}

input FilterConstructorResultInput {
  constructorResultsId: Int
  raceId: Int
  constructorId: Int
  points: Float
  status: String
}

extend type Query {
  constructorResults(
    skip: Int
    limit: Int
    filter: FilterConstructorResultInput
  ): [ConstructorResult]!
  constructorResult(constructorResultsId: ID!): ConstructorResult!
}

extend type Mutation {
  newConstructorResult(input: NewConstructorResultInput!): ConstructorResult!
  updateConstructorResult(
    constructorResultsId: ID!
    input: UpdateConstructorResultInput!
  ): ConstructorResult!
  removeConstructorResult(constructorResultsId: ID!): ConstructorResult!
}

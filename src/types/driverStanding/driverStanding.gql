type DriverStanding {
  driverStandingsId: Int!
  raceId: Int!
  race: Race!
  driverId: Int!
  driver: Driver!
  points: Float!
  position: Int
  positionText: String
  wins: Int!
}

input NewDriverStandingInput {
  driverStandingsId: Int!
  raceId: Int!
  driverId: Int!
  points: Float!
  position: Int
  positionText: String
  wins: Int!
}

input UpdateDriverStandingInput {
  raceId: Int
  driverId: Int
  points: Float
  position: Int
  positionText: String
  wins: Int
}

input FilterDriverStandingInput {
  driverStandingsId: Int
  raceId: Int
  driverId: Int
  points: Float
  position: Int
  positionText: String
  wins: Int
}

extend type Query {
  driverStandings(
    skip: Int
    limit: Int
    filter: FilterDriverStandingInput
  ): [DriverStanding]!
  driverStanding(driverStandingsId: ID!): DriverStanding!
}

extend type Mutation {
  newDriverStanding(input: NewDriverStandingInput!): DriverStanding!
  updateDriverStanding(
    driverStandingsId: Int!
    input: UpdateDriverStandingInput!
  ): DriverStanding!
  removeDriverStanding(driverStandingsId: ID!): DriverStanding!
}

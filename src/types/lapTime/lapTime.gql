type LapTime {
  raceId: Int!
  race: Race!
  driverId: Int!
  driver: Driver!
  lap: Int!
  position: Int
  time: String
  milliseconds: Int
}

input NewLapTimeInput {
  raceId: Int!
  driverId: Int!
  lap: Int!
  position: Int
  time: String
  milliseconds: Int
}

input UpdateLapTimeInput {
  position: Int
  time: String
  milliseconds: Int
}

input FilterLapTimeInput {
  raceId: Int
  driverId: Int
  lap: Int
  position: Int
  time: String
  milliseconds: Int
}

extend type Query {
  lapTimes(filter: FilterLapTimeInput, skip: Int, limit: Int): [LapTime]!
  lapTime(driverId: Int!, raceId: Int!, lap: Int!): LapTime!
}

extend type Mutation {
  newLapTime(input: NewLapTimeInput!): LapTime!
  updateLapTime(
    driverId: Int!
    raceId: Int!
    lap: Int!
    input: UpdateLapTimeInput!
  ): LapTime!
  removeLapTime(driverId: Int!, raceId: Int!, lap: Int!): LapTime!
}
